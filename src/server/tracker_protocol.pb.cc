// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fastdcs {

namespace {

const ::google::protobuf::Descriptor* KeyValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValuesPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValuesPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* FdcsTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FdcsTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerProtocol_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OperateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriorityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrackerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_5fprotocol_2eproto() {
  protobuf_AddDesc_tracker_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValuePair_descriptor_ = file->message_type(0);
  static const int KeyValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, value_),
  };
  KeyValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValuePair_descriptor_,
      KeyValuePair::default_instance_,
      KeyValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValuePair));
  KeyValuesPair_descriptor_ = file->message_type(1);
  static const int KeyValuesPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuesPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuesPair, value_),
  };
  KeyValuesPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValuesPair_descriptor_,
      KeyValuesPair::default_instance_,
      KeyValuesPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuesPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValuesPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValuesPair));
  FdcsTask_descriptor_ = file->message_type(2);
  static const int FdcsTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FdcsTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FdcsTask, lease_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FdcsTask, key_values_pairs_),
  };
  FdcsTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FdcsTask_descriptor_,
      FdcsTask::default_instance_,
      FdcsTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FdcsTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FdcsTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FdcsTask));
  TrackerStatus_descriptor_ = file->message_type(3);
  static const int TrackerStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, socket_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, process_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, free_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, total_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, free_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, total_memory_),
  };
  TrackerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerStatus_descriptor_,
      TrackerStatus::default_instance_,
      TrackerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerStatus));
  TrackerProtocol_descriptor_ = file->message_type(4);
  static const int TrackerProtocol_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, protocol_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, tracker_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, request_sock_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, request_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, response_sock_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, forwarding_sock_fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, response_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, tracker_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, key_values_pairs_),
  };
  TrackerProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerProtocol_descriptor_,
      TrackerProtocol::default_instance_,
      TrackerProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerProtocol));
  OperateType_descriptor_ = file->enum_type(0);
  PriorityType_descriptor_ = file->enum_type(1);
  TrackerType_descriptor_ = file->enum_type(2);
  ProtocolType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValuePair_descriptor_, &KeyValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValuesPair_descriptor_, &KeyValuesPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FdcsTask_descriptor_, &FdcsTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerStatus_descriptor_, &TrackerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerProtocol_descriptor_, &TrackerProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_5fprotocol_2eproto() {
  delete KeyValuePair::default_instance_;
  delete KeyValuePair_reflection_;
  delete KeyValuesPair::default_instance_;
  delete KeyValuesPair_reflection_;
  delete FdcsTask::default_instance_;
  delete FdcsTask_reflection_;
  delete TrackerStatus::default_instance_;
  delete TrackerStatus_reflection_;
  delete TrackerProtocol::default_instance_;
  delete TrackerProtocol_reflection_;
}

void protobuf_AddDesc_tracker_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026tracker_protocol.proto\022\007fastdcs\"*\n\014Key"
    "ValuePair\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"+\n"
    "\rKeyValuesPair\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \003"
    "(\014\"f\n\010FdcsTask\022\021\n\007task_id\030\001 \002(\t:\000\022\025\n\nlea"
    "se_time\030\002 \001(\003:\0010\0220\n\020key_values_pairs\030\003 \003"
    "(\0132\026.fastdcs.KeyValuesPair\"\232\002\n\rTrackerSt"
    "atus\022\025\n\013socket_addr\030\001 \001(\t:\000\022\025\n\006active\030\002 "
    "\001(\010:\005false\022;\n\014tracker_type\030\003 \001(\0162\024.fastd"
    "cs.TrackerType:\017UNKNOWN_TRACKER\022\024\n\nstart"
    "_time\030\004 \001(\t:\000\022\022\n\010run_time\030\005 \001(\t:\000\022\026\n\013pro"
    "cess_num\030\006 \001(\005:\0010\022\024\n\tfree_disk\030\007 \001(\005:\0010\022"
    "\025\n\ntotal_disk\030\010 \001(\005:\0010\022\026\n\013free_memory\030\t "
    "\001(\005:\0010\022\027\n\014total_memory\030\n \001(\005:\0010\"\236\003\n\017Trac"
    "kerProtocol\022\r\n\002id\030\001 \002(\003:\0010\022\017\n\004time\030\002 \001(\003"
    ":\0010\022>\n\rprotocol_type\030\003 \001(\0162\025.fastdcs.Pro"
    "tocolType:\020UNKNOWN_PROTOCOL\022;\n\014tracker_t"
    "ype\030\004 \001(\0162\024.fastdcs.TrackerType:\017UNKNOWN"
    "_TRACKER\022\033\n\021request_sock_addr\030\005 \001(\t:\000\022\026\n"
    "\014request_args\030\006 \001(\t:\000\022\034\n\022response_sock_a"
    "ddr\030\007 \001(\t:\000\022\036\n\022forwarding_sock_fd\030\010 \001(\005:"
    "\002-1\022\031\n\017response_result\030\t \001(\t:\000\022.\n\016tracke"
    "r_status\030\n \003(\0132\026.fastdcs.TrackerStatus\0220"
    "\n\020key_values_pairs\030\013 \003(\0132\026.fastdcs.KeyVa"
    "luesPair*[\n\013OperateType\022\023\n\017UNKNOWN_OPERA"
    "TE\020\000\022\017\n\013NEW_OPERATE\020\001\022\022\n\016DELETE_OPERATE\020"
    "\002\022\022\n\016MODIFY_OPERATE\020\003*|\n\014PriorityType\022\021\n"
    "\rIDLE_PRIORITY\020\000\022\022\n\016BELOW_PRIORITY\020\001\022\023\n\017"
    "NORMAL_PRIORITY\020\002\022\031\n\025ABOVE_NORMAL_PRIORI"
    "TY\020\003\022\025\n\021REALTIME_PRIORITY\020\004*U\n\013TrackerTy"
    "pe\022\023\n\017UNKNOWN_TRACKER\020\000\022\017\n\013MASTER_TYPE\020\001"
    "\022\017\n\013WORKER_TYPE\020\002\022\017\n\013CLIENT_TYPE\020\003*\362\002\n\014P"
    "rotocolType\022\024\n\020UNKNOWN_PROTOCOL\020\000\022\014\n\010ELE"
    "CTION\020\001\022\017\n\013COORDINATOR\020\002\022\026\n\022MASTER_ASK_T"
    "RACKER\020\003\022\030\n\024MASTER_REPORT_STATUS\020\004\022\026\n\022WO"
    "RKER_ASK_TRACKER\020\005\022\030\n\024WORKER_REPORT_STAT"
    "US\020\006\022\021\n\rCREATE_JOB_ID\020\007\022\016\n\nCOMMIT_JOB\020\010\022"
    "\027\n\023SYNC_TASK_DUPLICATE\020\t\022\032\n\026REQUEST_TASK"
    "_DUPLICATE\020\n\022\027\n\023WORKER_REQUEST_TASK\020\013\022\022\n"
    "\016TASK_COMPLETED\020\014\022\023\n\017ASK_TASK_STATUS\020\r\022\025"
    "\n\021MASTER_JOIN_GROUP\020\016\022\030\n\024MASTER_GROUP_CH"
    "ANGED\020\017", 1607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker_protocol.proto", &protobuf_RegisterTypes);
  KeyValuePair::default_instance_ = new KeyValuePair();
  KeyValuesPair::default_instance_ = new KeyValuesPair();
  FdcsTask::default_instance_ = new FdcsTask();
  TrackerStatus::default_instance_ = new TrackerStatus();
  TrackerProtocol::default_instance_ = new TrackerProtocol();
  KeyValuePair::default_instance_->InitAsDefaultInstance();
  KeyValuesPair::default_instance_->InitAsDefaultInstance();
  FdcsTask::default_instance_->InitAsDefaultInstance();
  TrackerStatus::default_instance_->InitAsDefaultInstance();
  TrackerProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_5fprotocol_2eproto {
  StaticDescriptorInitializer_tracker_5fprotocol_2eproto() {
    protobuf_AddDesc_tracker_5fprotocol_2eproto();
  }
} static_descriptor_initializer_tracker_5fprotocol_2eproto_;

const ::google::protobuf::EnumDescriptor* OperateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateType_descriptor_;
}
bool OperateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriorityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorityType_descriptor_;
}
bool PriorityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrackerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerType_descriptor_;
}
bool TrackerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolType_descriptor_;
}
bool ProtocolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValuePair::kKeyFieldNumber;
const int KeyValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValuePair::KeyValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValuePair::InitAsDefaultInstance() {
}

KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValuePair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuePair::~KeyValuePair() {
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuePair_descriptor_;
}

const KeyValuePair& KeyValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fprotocol_2eproto();  return *default_instance_;
}

KeyValuePair* KeyValuePair::default_instance_ = NULL;

KeyValuePair* KeyValuePair::New() const {
  return new KeyValuePair;
}

void KeyValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValuePair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  
  return true;
}

void KeyValuePair::Swap(KeyValuePair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuePair_descriptor_;
  metadata.reflection = KeyValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValuesPair::kKeyFieldNumber;
const int KeyValuesPair::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValuesPair::KeyValuesPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValuesPair::InitAsDefaultInstance() {
}

KeyValuesPair::KeyValuesPair(const KeyValuesPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValuesPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValuesPair::~KeyValuesPair() {
  SharedDtor();
}

void KeyValuesPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void KeyValuesPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValuesPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValuesPair_descriptor_;
}

const KeyValuesPair& KeyValuesPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fprotocol_2eproto();  return *default_instance_;
}

KeyValuesPair* KeyValuesPair::default_instance_ = NULL;

KeyValuesPair* KeyValuesPair::New() const {
  return new KeyValuesPair;
}

void KeyValuesPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValuesPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // repeated bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValuesPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValuesPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  // repeated bytes value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValuesPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  // repeated bytes value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValuesPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValuesPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValuesPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValuesPair::MergeFrom(const KeyValuesPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValuesPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuesPair::CopyFrom(const KeyValuesPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuesPair::IsInitialized() const {
  
  return true;
}

void KeyValuesPair::Swap(KeyValuesPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValuesPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValuesPair_descriptor_;
  metadata.reflection = KeyValuesPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FdcsTask::kTaskIdFieldNumber;
const int FdcsTask::kLeaseTimeFieldNumber;
const int FdcsTask::kKeyValuesPairsFieldNumber;
#endif  // !_MSC_VER

FdcsTask::FdcsTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FdcsTask::InitAsDefaultInstance() {
}

FdcsTask::FdcsTask(const FdcsTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FdcsTask::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lease_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FdcsTask::~FdcsTask() {
  SharedDtor();
}

void FdcsTask::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (this != default_instance_) {
  }
}

void FdcsTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FdcsTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FdcsTask_descriptor_;
}

const FdcsTask& FdcsTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fprotocol_2eproto();  return *default_instance_;
}

FdcsTask* FdcsTask::default_instance_ = NULL;

FdcsTask* FdcsTask::New() const {
  return new FdcsTask;
}

void FdcsTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    lease_time_ = GOOGLE_LONGLONG(0);
  }
  key_values_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FdcsTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task_id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lease_time;
        break;
      }
      
      // optional int64 lease_time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lease_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_time_)));
          set_has_lease_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key_values_pairs;
        break;
      }
      
      // repeated .fastdcs.KeyValuesPair key_values_pairs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_values_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_values_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key_values_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FdcsTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string task_id = 1 [default = ""];
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->task_id(), output);
  }
  
  // optional int64 lease_time = 2 [default = 0];
  if (has_lease_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lease_time(), output);
  }
  
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 3;
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->key_values_pairs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FdcsTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string task_id = 1 [default = ""];
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }
  
  // optional int64 lease_time = 2 [default = 0];
  if (has_lease_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lease_time(), target);
  }
  
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 3;
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->key_values_pairs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FdcsTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string task_id = 1 [default = ""];
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // optional int64 lease_time = 2 [default = 0];
    if (has_lease_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lease_time());
    }
    
  }
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 3;
  total_size += 1 * this->key_values_pairs_size();
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_values_pairs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FdcsTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FdcsTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FdcsTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FdcsTask::MergeFrom(const FdcsTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_values_pairs_.MergeFrom(from.key_values_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_lease_time()) {
      set_lease_time(from.lease_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FdcsTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FdcsTask::CopyFrom(const FdcsTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdcsTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FdcsTask::Swap(FdcsTask* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(lease_time_, other->lease_time_);
    key_values_pairs_.Swap(&other->key_values_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FdcsTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FdcsTask_descriptor_;
  metadata.reflection = FdcsTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerStatus::kSocketAddrFieldNumber;
const int TrackerStatus::kActiveFieldNumber;
const int TrackerStatus::kTrackerTypeFieldNumber;
const int TrackerStatus::kStartTimeFieldNumber;
const int TrackerStatus::kRunTimeFieldNumber;
const int TrackerStatus::kProcessNumFieldNumber;
const int TrackerStatus::kFreeDiskFieldNumber;
const int TrackerStatus::kTotalDiskFieldNumber;
const int TrackerStatus::kFreeMemoryFieldNumber;
const int TrackerStatus::kTotalMemoryFieldNumber;
#endif  // !_MSC_VER

TrackerStatus::TrackerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerStatus::InitAsDefaultInstance() {
}

TrackerStatus::TrackerStatus(const TrackerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerStatus::SharedCtor() {
  _cached_size_ = 0;
  socket_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_ = false;
  tracker_type_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  run_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_num_ = 0;
  free_disk_ = 0;
  total_disk_ = 0;
  free_memory_ = 0;
  total_memory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerStatus::~TrackerStatus() {
  SharedDtor();
}

void TrackerStatus::SharedDtor() {
  if (socket_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_addr_;
  }
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (run_time_ != &::google::protobuf::internal::kEmptyString) {
    delete run_time_;
  }
  if (this != default_instance_) {
  }
}

void TrackerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerStatus_descriptor_;
}

const TrackerStatus& TrackerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fprotocol_2eproto();  return *default_instance_;
}

TrackerStatus* TrackerStatus::default_instance_ = NULL;

TrackerStatus* TrackerStatus::New() const {
  return new TrackerStatus;
}

void TrackerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_socket_addr()) {
      if (socket_addr_ != &::google::protobuf::internal::kEmptyString) {
        socket_addr_->clear();
      }
    }
    active_ = false;
    tracker_type_ = 0;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_run_time()) {
      if (run_time_ != &::google::protobuf::internal::kEmptyString) {
        run_time_->clear();
      }
    }
    process_num_ = 0;
    free_disk_ = 0;
    total_disk_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    free_memory_ = 0;
    total_memory_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string socket_addr = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_addr().data(), this->socket_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }
      
      // optional bool active = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tracker_type;
        break;
      }
      
      // optional .fastdcs.TrackerType tracker_type = 3 [default = UNKNOWN_TRACKER];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (fastdcs::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< fastdcs::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_run_time;
        break;
      }
      
      // optional string run_time = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->run_time().data(), this->run_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_process_num;
        break;
      }
      
      // optional int32 process_num = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_num_)));
          set_has_process_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_free_disk;
        break;
      }
      
      // optional int32 free_disk = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_disk_)));
          set_has_free_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_disk;
        break;
      }
      
      // optional int32 total_disk = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_disk_)));
          set_has_total_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_free_memory;
        break;
      }
      
      // optional int32 free_memory = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_memory_)));
          set_has_free_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_memory;
        break;
      }
      
      // optional int32 total_memory = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_memory_)));
          set_has_total_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string socket_addr = 1 [default = ""];
  if (has_socket_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_addr().data(), this->socket_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->socket_addr(), output);
  }
  
  // optional bool active = 2 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }
  
  // optional .fastdcs.TrackerType tracker_type = 3 [default = UNKNOWN_TRACKER];
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tracker_type(), output);
  }
  
  // optional string start_time = 4 [default = ""];
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->start_time(), output);
  }
  
  // optional string run_time = 5 [default = ""];
  if (has_run_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->run_time().data(), this->run_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->run_time(), output);
  }
  
  // optional int32 process_num = 6 [default = 0];
  if (has_process_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->process_num(), output);
  }
  
  // optional int32 free_disk = 7 [default = 0];
  if (has_free_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->free_disk(), output);
  }
  
  // optional int32 total_disk = 8 [default = 0];
  if (has_total_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_disk(), output);
  }
  
  // optional int32 free_memory = 9 [default = 0];
  if (has_free_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->free_memory(), output);
  }
  
  // optional int32 total_memory = 10 [default = 0];
  if (has_total_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_memory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string socket_addr = 1 [default = ""];
  if (has_socket_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_addr().data(), this->socket_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socket_addr(), target);
  }
  
  // optional bool active = 2 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }
  
  // optional .fastdcs.TrackerType tracker_type = 3 [default = UNKNOWN_TRACKER];
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tracker_type(), target);
  }
  
  // optional string start_time = 4 [default = ""];
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->start_time(), target);
  }
  
  // optional string run_time = 5 [default = ""];
  if (has_run_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->run_time().data(), this->run_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->run_time(), target);
  }
  
  // optional int32 process_num = 6 [default = 0];
  if (has_process_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->process_num(), target);
  }
  
  // optional int32 free_disk = 7 [default = 0];
  if (has_free_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->free_disk(), target);
  }
  
  // optional int32 total_disk = 8 [default = 0];
  if (has_total_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_disk(), target);
  }
  
  // optional int32 free_memory = 9 [default = 0];
  if (has_free_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->free_memory(), target);
  }
  
  // optional int32 total_memory = 10 [default = 0];
  if (has_total_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_memory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string socket_addr = 1 [default = ""];
    if (has_socket_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_addr());
    }
    
    // optional bool active = 2 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }
    
    // optional .fastdcs.TrackerType tracker_type = 3 [default = UNKNOWN_TRACKER];
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional string start_time = 4 [default = ""];
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }
    
    // optional string run_time = 5 [default = ""];
    if (has_run_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->run_time());
    }
    
    // optional int32 process_num = 6 [default = 0];
    if (has_process_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_num());
    }
    
    // optional int32 free_disk = 7 [default = 0];
    if (has_free_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_disk());
    }
    
    // optional int32 total_disk = 8 [default = 0];
    if (has_total_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_disk());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 free_memory = 9 [default = 0];
    if (has_free_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_memory());
    }
    
    // optional int32 total_memory = 10 [default = 0];
    if (has_total_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_memory());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerStatus::MergeFrom(const TrackerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socket_addr()) {
      set_socket_addr(from.socket_addr());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_run_time()) {
      set_run_time(from.run_time());
    }
    if (from.has_process_num()) {
      set_process_num(from.process_num());
    }
    if (from.has_free_disk()) {
      set_free_disk(from.free_disk());
    }
    if (from.has_total_disk()) {
      set_total_disk(from.total_disk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_free_memory()) {
      set_free_memory(from.free_memory());
    }
    if (from.has_total_memory()) {
      set_total_memory(from.total_memory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerStatus::CopyFrom(const TrackerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerStatus::IsInitialized() const {
  
  return true;
}

void TrackerStatus::Swap(TrackerStatus* other) {
  if (other != this) {
    std::swap(socket_addr_, other->socket_addr_);
    std::swap(active_, other->active_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(run_time_, other->run_time_);
    std::swap(process_num_, other->process_num_);
    std::swap(free_disk_, other->free_disk_);
    std::swap(total_disk_, other->total_disk_);
    std::swap(free_memory_, other->free_memory_);
    std::swap(total_memory_, other->total_memory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerStatus_descriptor_;
  metadata.reflection = TrackerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerProtocol::kIdFieldNumber;
const int TrackerProtocol::kTimeFieldNumber;
const int TrackerProtocol::kProtocolTypeFieldNumber;
const int TrackerProtocol::kTrackerTypeFieldNumber;
const int TrackerProtocol::kRequestSockAddrFieldNumber;
const int TrackerProtocol::kRequestArgsFieldNumber;
const int TrackerProtocol::kResponseSockAddrFieldNumber;
const int TrackerProtocol::kForwardingSockFdFieldNumber;
const int TrackerProtocol::kResponseResultFieldNumber;
const int TrackerProtocol::kTrackerStatusFieldNumber;
const int TrackerProtocol::kKeyValuesPairsFieldNumber;
#endif  // !_MSC_VER

TrackerProtocol::TrackerProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerProtocol::InitAsDefaultInstance() {
}

TrackerProtocol::TrackerProtocol(const TrackerProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerProtocol::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  protocol_type_ = 0;
  tracker_type_ = 0;
  request_sock_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_sock_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forwarding_sock_fd_ = -1;
  response_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerProtocol::~TrackerProtocol() {
  SharedDtor();
}

void TrackerProtocol::SharedDtor() {
  if (request_sock_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete request_sock_addr_;
  }
  if (request_args_ != &::google::protobuf::internal::kEmptyString) {
    delete request_args_;
  }
  if (response_sock_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete response_sock_addr_;
  }
  if (response_result_ != &::google::protobuf::internal::kEmptyString) {
    delete response_result_;
  }
  if (this != default_instance_) {
  }
}

void TrackerProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerProtocol_descriptor_;
}

const TrackerProtocol& TrackerProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fprotocol_2eproto();  return *default_instance_;
}

TrackerProtocol* TrackerProtocol::default_instance_ = NULL;

TrackerProtocol* TrackerProtocol::New() const {
  return new TrackerProtocol;
}

void TrackerProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
    protocol_type_ = 0;
    tracker_type_ = 0;
    if (has_request_sock_addr()) {
      if (request_sock_addr_ != &::google::protobuf::internal::kEmptyString) {
        request_sock_addr_->clear();
      }
    }
    if (has_request_args()) {
      if (request_args_ != &::google::protobuf::internal::kEmptyString) {
        request_args_->clear();
      }
    }
    if (has_response_sock_addr()) {
      if (response_sock_addr_ != &::google::protobuf::internal::kEmptyString) {
        response_sock_addr_->clear();
      }
    }
    forwarding_sock_fd_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_response_result()) {
      if (response_result_ != &::google::protobuf::internal::kEmptyString) {
        response_result_->clear();
      }
    }
  }
  tracker_status_.Clear();
  key_values_pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_protocol_type;
        break;
      }
      
      // optional .fastdcs.ProtocolType protocol_type = 3 [default = UNKNOWN_PROTOCOL];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (fastdcs::ProtocolType_IsValid(value)) {
            set_protocol_type(static_cast< fastdcs::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tracker_type;
        break;
      }
      
      // optional .fastdcs.TrackerType tracker_type = 4 [default = UNKNOWN_TRACKER];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracker_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (fastdcs::TrackerType_IsValid(value)) {
            set_tracker_type(static_cast< fastdcs::TrackerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_request_sock_addr;
        break;
      }
      
      // optional string request_sock_addr = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_sock_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_sock_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_sock_addr().data(), this->request_sock_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_request_args;
        break;
      }
      
      // optional string request_args = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_args().data(), this->request_args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_response_sock_addr;
        break;
      }
      
      // optional string response_sock_addr = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_sock_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_sock_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_sock_addr().data(), this->response_sock_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_forwarding_sock_fd;
        break;
      }
      
      // optional int32 forwarding_sock_fd = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forwarding_sock_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forwarding_sock_fd_)));
          set_has_forwarding_sock_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_response_result;
        break;
      }
      
      // optional string response_result = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_result().data(), this->response_result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tracker_status;
        break;
      }
      
      // repeated .fastdcs.TrackerStatus tracker_status = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracker_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tracker_status;
        if (input->ExpectTag(90)) goto parse_key_values_pairs;
        break;
      }
      
      // repeated .fastdcs.KeyValuesPair key_values_pairs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_values_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_values_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_key_values_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // optional int64 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional .fastdcs.ProtocolType protocol_type = 3 [default = UNKNOWN_PROTOCOL];
  if (has_protocol_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->protocol_type(), output);
  }
  
  // optional .fastdcs.TrackerType tracker_type = 4 [default = UNKNOWN_TRACKER];
  if (has_tracker_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tracker_type(), output);
  }
  
  // optional string request_sock_addr = 5 [default = ""];
  if (has_request_sock_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_sock_addr().data(), this->request_sock_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->request_sock_addr(), output);
  }
  
  // optional string request_args = 6 [default = ""];
  if (has_request_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_args().data(), this->request_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->request_args(), output);
  }
  
  // optional string response_sock_addr = 7 [default = ""];
  if (has_response_sock_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_sock_addr().data(), this->response_sock_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->response_sock_addr(), output);
  }
  
  // optional int32 forwarding_sock_fd = 8 [default = -1];
  if (has_forwarding_sock_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->forwarding_sock_fd(), output);
  }
  
  // optional string response_result = 9 [default = ""];
  if (has_response_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_result().data(), this->response_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->response_result(), output);
  }
  
  // repeated .fastdcs.TrackerStatus tracker_status = 10;
  for (int i = 0; i < this->tracker_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tracker_status(i), output);
  }
  
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 11;
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->key_values_pairs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // optional int64 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional .fastdcs.ProtocolType protocol_type = 3 [default = UNKNOWN_PROTOCOL];
  if (has_protocol_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->protocol_type(), target);
  }
  
  // optional .fastdcs.TrackerType tracker_type = 4 [default = UNKNOWN_TRACKER];
  if (has_tracker_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tracker_type(), target);
  }
  
  // optional string request_sock_addr = 5 [default = ""];
  if (has_request_sock_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_sock_addr().data(), this->request_sock_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_sock_addr(), target);
  }
  
  // optional string request_args = 6 [default = ""];
  if (has_request_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_args().data(), this->request_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->request_args(), target);
  }
  
  // optional string response_sock_addr = 7 [default = ""];
  if (has_response_sock_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_sock_addr().data(), this->response_sock_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->response_sock_addr(), target);
  }
  
  // optional int32 forwarding_sock_fd = 8 [default = -1];
  if (has_forwarding_sock_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->forwarding_sock_fd(), target);
  }
  
  // optional string response_result = 9 [default = ""];
  if (has_response_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_result().data(), this->response_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->response_result(), target);
  }
  
  // repeated .fastdcs.TrackerStatus tracker_status = 10;
  for (int i = 0; i < this->tracker_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tracker_status(i), target);
  }
  
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 11;
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->key_values_pairs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // optional int64 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional .fastdcs.ProtocolType protocol_type = 3 [default = UNKNOWN_PROTOCOL];
    if (has_protocol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_type());
    }
    
    // optional .fastdcs.TrackerType tracker_type = 4 [default = UNKNOWN_TRACKER];
    if (has_tracker_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracker_type());
    }
    
    // optional string request_sock_addr = 5 [default = ""];
    if (has_request_sock_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_sock_addr());
    }
    
    // optional string request_args = 6 [default = ""];
    if (has_request_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_args());
    }
    
    // optional string response_sock_addr = 7 [default = ""];
    if (has_response_sock_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_sock_addr());
    }
    
    // optional int32 forwarding_sock_fd = 8 [default = -1];
    if (has_forwarding_sock_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forwarding_sock_fd());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string response_result = 9 [default = ""];
    if (has_response_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_result());
    }
    
  }
  // repeated .fastdcs.TrackerStatus tracker_status = 10;
  total_size += 1 * this->tracker_status_size();
  for (int i = 0; i < this->tracker_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracker_status(i));
  }
  
  // repeated .fastdcs.KeyValuesPair key_values_pairs = 11;
  total_size += 1 * this->key_values_pairs_size();
  for (int i = 0; i < this->key_values_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_values_pairs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerProtocol::MergeFrom(const TrackerProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracker_status_.MergeFrom(from.tracker_status_);
  key_values_pairs_.MergeFrom(from.key_values_pairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_protocol_type()) {
      set_protocol_type(from.protocol_type());
    }
    if (from.has_tracker_type()) {
      set_tracker_type(from.tracker_type());
    }
    if (from.has_request_sock_addr()) {
      set_request_sock_addr(from.request_sock_addr());
    }
    if (from.has_request_args()) {
      set_request_args(from.request_args());
    }
    if (from.has_response_sock_addr()) {
      set_response_sock_addr(from.response_sock_addr());
    }
    if (from.has_forwarding_sock_fd()) {
      set_forwarding_sock_fd(from.forwarding_sock_fd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_response_result()) {
      set_response_result(from.response_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerProtocol::CopyFrom(const TrackerProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TrackerProtocol::Swap(TrackerProtocol* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(protocol_type_, other->protocol_type_);
    std::swap(tracker_type_, other->tracker_type_);
    std::swap(request_sock_addr_, other->request_sock_addr_);
    std::swap(request_args_, other->request_args_);
    std::swap(response_sock_addr_, other->response_sock_addr_);
    std::swap(forwarding_sock_fd_, other->forwarding_sock_fd_);
    std::swap(response_result_, other->response_result_);
    tracker_status_.Swap(&other->tracker_status_);
    key_values_pairs_.Swap(&other->key_values_pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerProtocol_descriptor_;
  metadata.reflection = TrackerProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastdcs

// @@protoc_insertion_point(global_scope)
